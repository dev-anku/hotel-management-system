generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model guest {
  GuestID     Int           @id @default(autoincrement())
  Name        String        @db.VarChar(100)
  Address     String        @db.Text
  PhoneNumber String        @unique(map: "PhoneNumber") @db.VarChar(15)
  Email       String        @unique(map: "Email") @db.VarChar(100)
  reservation reservation[]
}

model payment {
  PaymentID     Int                   @id @default(autoincrement())
  ReservationID Int
  PaymentDate   DateTime              @db.Date
  Amount        Decimal               @db.Decimal(10, 2)
  PaymentStatus payment_PaymentStatus
  reservation   reservation           @relation(fields: [ReservationID], references: [ReservationID], onDelete: NoAction, onUpdate: NoAction, map: "payment_ibfk_1")

  @@index([ReservationID], map: "ReservationID")
}

model reservation {
  ReservationID      Int                  @id @default(autoincrement())
  GuestID            Int
  RoomID             Int
  CheckInDate        DateTime             @db.Date
  CheckOutDate       DateTime             @db.Date
  Status             reservation_Status
  TotalAmount        Decimal              @db.Decimal(10, 2)
  payment            payment[]
  guest              guest                @relation(fields: [GuestID], references: [GuestID], onDelete: NoAction, onUpdate: NoAction, map: "reservation_ibfk_1")
  room               room                 @relation(fields: [RoomID], references: [RoomID], onDelete: NoAction, onUpdate: NoAction, map: "reservation_ibfk_2")
  reservationservice reservationservice[]
  staff_reservation  staff_reservation[]

  @@index([GuestID], map: "GuestID")
  @@index([RoomID], map: "RoomID")
}

model reservationservice {
  ReservationID Int
  ServiceID     Int
  reservation   reservation @relation(fields: [ReservationID], references: [ReservationID], onDelete: NoAction, onUpdate: NoAction, map: "reservationservice_ibfk_1")
  service       service     @relation(fields: [ServiceID], references: [ServiceID], onDelete: NoAction, onUpdate: NoAction, map: "reservationservice_ibfk_2")

  @@id([ReservationID, ServiceID])
  @@index([ServiceID], map: "ServiceID")
}

model room {
  RoomID      Int           @id @default(autoincrement())
  RoomNumber  String        @unique(map: "RoomNumber") @db.VarChar(10)
  Type        String        @db.VarChar(50)
  Price       Decimal       @db.Decimal(10, 2)
  StatusID    Int?
  reservation reservation[]
  roomstatus  roomstatus?   @relation(fields: [StatusID], references: [StatusID], onDelete: NoAction, onUpdate: NoAction, map: "room_ibfk_1")

  @@index([StatusID], map: "StatusID")
}

model roomstatus {
  StatusID Int    @id @default(autoincrement())
  Status   String @unique(map: "Status") @db.VarChar(50)
  room     room[]
}

model service {
  ServiceID          Int                  @id @default(autoincrement())
  Name               String               @db.VarChar(100)
  Price              Decimal              @db.Decimal(10, 2)
  reservationservice reservationservice[]
}

model staff {
  StaffID           Int                 @id @default(autoincrement())
  Name              String              @db.VarChar(100)
  Position          String              @db.VarChar(50)
  PhoneNumber       String              @unique(map: "PhoneNumber") @db.VarChar(15)
  Email             String              @unique(map: "Email") @db.VarChar(100)
  staff_reservation staff_reservation[]
}

model staff_reservation {
  StaffID       Int
  ReservationID Int
  staff         staff       @relation(fields: [StaffID], references: [StaffID], onDelete: NoAction, onUpdate: NoAction, map: "staff_reservation_ibfk_1")
  reservation   reservation @relation(fields: [ReservationID], references: [ReservationID], onDelete: NoAction, onUpdate: NoAction, map: "staff_reservation_ibfk_2")

  @@id([StaffID, ReservationID])
  @@index([ReservationID], map: "ReservationID")
}

enum payment_PaymentStatus {
  Pending
  Completed
  Failed
}

enum reservation_Status {
  Confirmed
  Cancelled
  Completed
}
